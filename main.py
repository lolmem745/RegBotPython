from typing import Optional
import discord
from discord.ext import commands
import requests
import sqlite3
import random
import config
from dataclasses import dataclass, asdict

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
intents = discord.Intents.default()
intents.message_content = True
intents.members = True
bot = commands.Bot(command_prefix="!", intents=intents)

USER_REGISTRATION_DICT = {}

# –°–æ–∑–¥–∞–Ω–∏–µ –∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
conn = sqlite3.connect('users.db')
c = conn.cursor()

# –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü, –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
c.execute('''CREATE TABLE IF NOT EXISTS users
             (discord_id TEXT PRIMARY KEY, riot_id TEXT, region TEXT, rank_flex TEXT, 
             wr_flex TEXT, rank_solo TEXT, wr_solo TEXT, role1 TEXT, role2 TEXT, opgg_link TEXT)''')
conn.commit()
c.execute('''CREATE TABLE IF NOT EXISTS categories
             ("index" INTEGER PRIMARY KEY, –ö–∞—Ç–µ–≥–æ—Ä–∏—è TEXT, –ß–µ–º–ø–∏–æ–Ω—ã TEXT)''')
conn.commit()

# –ò–º–ø–æ—Ä—Ç –∏–∑ config.py
TOKEN = config.discord_bot_token
RIOT_API_KEY = config.riot_api_key
role_id = config.role_id  # id —Ä–æ–ª–∏ –¥–ª—è –∫–æ—Ç–æ—Ä–æ–π —Ä–∞–±–æ—Ç–∞–µ—Ç /—Ä–∞–Ω–¥–æ–º

# –°–ª–æ–≤–∞—Ä—å —Å –∏–∫–æ–Ω–∫–∞–º–∏
ICON_DICT = {'7': '–†–æ–∑—É', '9': '–î–≤–∞ –ú–µ—á–∞', '18': '–ó–µ–ª—å–µ', '20': '–ü–∏—Ä–∞–º–∏–¥—ã', '23': '–†–æ—Å—Ç–æ–∫'}
CATEGORIES_DICT = {}

c.execute("SELECT –ö–∞—Ç–µ–≥–æ—Ä–∏—è, –ß–µ–º–ø–∏–æ–Ω—ã FROM categories")
rows = c.fetchall()

for row in rows:
    category = row[0]
    champions_field = row[1]
    if champions_field:
        champions = champions_field.split('\n')  # –ß–µ–º–ø–∏–æ–Ω—ã —Ä–∞–∑–¥–µ–ª–µ–Ω—ã –ø–µ—Ä–µ–Ω–æ—Å–∞–º–∏ —Å—Ç—Ä–æ–∫–∏
    else:
        champions = []
    CATEGORIES_DICT[category] = champions
conn.commit()

labels_values = ["Top", "Bot", "Mid", "Sup", "Jng", "Fill"]

options = [
    discord.SelectOption(label=label, value=label.lower(), default=False)
    for label in labels_values
]

server_options = [
    discord.SelectOption(label="RU", value="ru", default=False),
    discord.SelectOption(label="EUW", value="euw1", default=False)
]

@dataclass
class UserInfo:
    name_data: Optional[str] = None
    primary_role: Optional[str] = None
    secondary_role: Optional[str] = None
    server_data: Optional[str] = None
    account_name: Optional[str] = None
    account_tag: Optional[str] = None
    rank_solo: Optional[str] = None
    rank_flex: Optional[str] = None
    winrate_ranked_solo: Optional[str] = None
    winrate_ranked_flex: Optional[str] = None
    account_puuid: Optional[str] = None
    required_icon: Optional[str] = None


UID: dict[str, UserInfo] = dict()  # USER_INFO_DICT


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è puuid –∞–∫–∫–∞—É–Ω—Ç–∞ Riot
def get_account_puuid(name, tag):
    url = f'https://europe.api.riotgames.com/riot/account/v1/accounts/by-riot-id/{name}/{tag}?api_key={RIOT_API_KEY}'
    response = requests.get(url)
    return response.json()["puuid"]


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ–± –∞–∫–∫–∞—É–Ω—Ç–µ –õ–∏–≥–∏ –õ–µ–≥–µ–Ω–¥
def get_summoner_info_by_puuid(region, summoner_puuid):
    url = f'https://{region}.api.riotgames.com/lol/summoner/v4/summoners/by-puuid/{summoner_puuid}?api_key={RIOT_API_KEY}'
    response = requests.get(url)
    return response.json()


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ —Ä–µ–π—Ç–∏–Ω–≥–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –õ–∏–≥–µ –õ–µ–≥–µ–Ω–¥
def get_ranked_info(region, summoner_id):
    url = f'https://{region}.api.riotgames.com/lol/league/v4/entries/by-summoner/{summoner_id}?api_key={RIOT_API_KEY}'
    response = requests.get(url)
    return response.json()


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–±–æ—Ä–∞ —Å–ª—É—á–∞–π–Ω–æ–π id –∏–∫–æ–Ω–∫–∏ –∏–∑ —Å–ª–æ–≤–∞—Ä—è
def choose_random_icon():
    random_icon = random.choice(list(ICON_DICT.keys()))
    return random_icon


def send_data_to_db(ds_user_id):
    opgg_link = f"https://www.op.gg/summoners/{UID[ds_user_id].server_data}/" \
                f"{UID[ds_user_id].account_name}-{UID[ds_user_id].account_tag}"
    summoner_info = get_summoner_info_by_puuid(
        UID[ds_user_id].server_data, UID[ds_user_id].account_puuid)
    ranked_info = get_ranked_info(UID[ds_user_id].server_data, summoner_info['id'])
    for entry in ranked_info:
        if entry['queueType'] == 'RANKED_SOLO_5x5':
            UID[ds_user_id].rank_solo = entry['tier'] + " " + entry['rank']
            UID[ds_user_id].winrate_ranked_solo = str(
                round(entry['wins'] / (entry['losses'] + entry['wins']) * 100, 2)) + "%"
        elif entry['queueType'] == 'RANKED_FLEX_SR':
            UID[ds_user_id].rank_flex = str(entry['tier'] + " " + entry['rank'])
            UID[ds_user_id].winrate_ranked_flex = str(
                round(entry['wins'] / (entry['losses'] + entry['wins']) * 100, 2)) + "%"
    c.execute(
        "INSERT INTO users (discord_id, riot_id, region, rank_flex, wr_flex,"
        " rank_solo, wr_solo, role1, role2, opgg_link) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)",
        (ds_user_id, UID[ds_user_id].name_data, UID[ds_user_id].server_data, UID[ds_user_id].rank_flex,
         UID[ds_user_id].winrate_ranked_flex,
         UID[ds_user_id].rank_solo, UID[ds_user_id].winrate_ranked_solo, UID[ds_user_id].primary_role,
         UID[ds_user_id].secondary_role,
         opgg_link))
    conn.commit()


# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞ —Ä–∞–Ω–¥–æ–º–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏, –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π –≤ –Ω–µ–π –∏ —Ä–µ—Ä–æ–ª–ª–∞
@bot.tree.command(name='—Ä–∞–Ω–¥–æ–º', description='–í—ã–±–æ—Ä —Å–ª—É—á–∞–π–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏')
async def category_randomizer(interaction: discord.Interaction):
    def get_random_category():
        return random.choice(list(CATEGORIES_DICT.keys()))

    # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–≤–æ–¥–∞ —Å–ø–∏—Å–∫–∞ –≥–µ—Ä–æ–µ–≤ –ø–æ –ø–µ—Ä–µ–¥–∞–Ω–Ω–æ–º—É –∑–Ω–∞—á–µ–Ω–∏—é –∫–ª—é—á–∞
    def get_champions_by_category(champion_category):
        return CATEGORIES_DICT.get(champion_category, [])

    if interaction.guild.get_member(interaction.user.id).get_role(role_id) is not None:
        class RerollButtonView(discord.ui.View):
            @discord.ui.button(label="–†–µ—Ä–æ–ª–ª", style=discord.ButtonStyle.primary, emoji='üé≤')
            async def reroll_button_callback(self, interaction_reroll: discord.Interaction, button: discord.ui.Button):
                previous_rand_category = rand_category
                new_rand_category = get_random_category()
                while new_rand_category == previous_rand_category:
                    new_rand_category = get_random_category()
                champions_text = ', '.join(f'{champ}' for champ in get_champions_by_category(new_rand_category))
                new_view = RerollButtonView()
                await interaction.edit_original_response(content=f'–°–ª—É—á–∞–π–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è: {new_rand_category}\n\n–ß–µ–º–ø–∏–æ–Ω—ã'
                                                                 f' –≤ —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: {champions_text}\n‚†Ä', view=new_view)
                await interaction_reroll.response.defer()

        rand_category = get_random_category()
        text = ', '.join(f'{champ}' for champ in get_champions_by_category(rand_category))
        view = RerollButtonView()
        await interaction.response.send_message(
            f'–°–ª—É—á–∞–π–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è: {rand_category}\n\n'f'–ß–µ–º–ø–∏–æ–Ω—ã –≤ —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: '
            f'{text}\n', view=view, silent=True)
    else:
        await interaction.response.send_message('–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.', ephemeral=True)


# –û—Å–Ω–æ–≤–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞, —Å–æ–±–∏—Ä–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –∑–∞–Ω–æ—Å–∏—Ç –≤ —Ç–∞–±–ª–∏—Ü—É users –≤ users.db
@bot.tree.command(name='—Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è', description='–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–∞ —Ç—É—Ä–Ω–∏—Ä')
async def input_command(interaction: discord.Interaction):
    UID[str(interaction.user.id)] = UserInfo()

    # –î–∞–ª–µ–µ –∏–¥—É—Ç –∫–ª–∞—Å—Å—ã View –ø–æ —Å—É—Ç–∏ –¥–æ–±–∞–≤–ª—è—é—â–∏–µ —Ç–µ–∫—Å—Ç, –∫–Ω–æ–ø–∫–∏ –∏ –º–µ–Ω—é—à–∫–∏
    class TextInputView(discord.ui.View):
        @discord.ui.button(label="–ù–∞—á–∞—Ç—å", style=discord.ButtonStyle.primary)
        async def open_form(self, interaction_start: discord.Interaction, button: discord.ui.Button):
            modal = TextInputModal(user_id=interaction_start.user.id)
            await interaction_start.response.send_modal(modal)

    class TextInputModal(discord.ui.Modal):
        def __init__(self, user_id):
            super().__init__(title="–§–æ—Ä–º–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –Ω–∞ —Ç—É—Ä–Ω–∏—Ä")
            self.user_id = user_id
            self.text_input = discord.ui.TextInput(label="–í–≤–µ–¥–∏—Ç–µ –≤–∞—à RiotID –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ù–∏–∫#—Ç–µ–≥", placeholder="Kuzhnya#666")
            self.add_item(self.text_input)

        async def on_submit(self, interaction_on_submit: discord.Interaction):
            ios_id = str(interaction_on_submit.user.id)
            user_text = self.text_input.value
            UID[ios_id].name_data = user_text
            try:
                UID[ios_id].account_name, UID[ios_id].account_tag = UID[ios_id].name_data.split('#')
                UID[ios_id].account_puuid = get_account_puuid(UID[ios_id].account_name, UID[ios_id].account_tag)
                view = SelectRoleMenu()
                await interaction.edit_original_response(
                    content=f"–í–≤–µ–¥–µ–Ω–Ω—ã–π Riot Id: {user_text}. –¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –æ—Å–Ω–æ–≤–Ω—É—é —Ä–æ–ª—å:", view=view)
                await interaction_on_submit.response.defer()
            except ValueError:
                await interaction_on_submit.response.send_message(
                    f"–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç Riot Id. –í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /—Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –µ—â—ë —Ä–∞–∑. –ü—Ä–∏–º–µ—Ä RiotId: Kuzhnya#666",
                    ephemeral=True, delete_after=float(20))

    class SelectRoleMenu(discord.ui.View):
        @discord.ui.select(placeholder="–†–æ–ª–∏", custom_id="select_role_1", options=options, max_values=1)
        async def role_select(self, interaction_select_1: discord.Interaction, select: discord.ui.Select):
            is1_id = str(interaction_select_1.user.id)
            UID[is1_id].primary_role = select.values[0]
            view = SelectRoleMenu2()
            await interaction.edit_original_response(
                content=f"–û—Å–Ω–æ–≤–Ω–∞—è —Ä–æ–ª—å: {UID[is1_id].primary_role}. –¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –≤—Ç–æ—Ä—É—é —Ä–æ–ª—å (–¥—Ä—É–≥—É—é).", view=view)
            await interaction_select_1.response.defer()

    class SelectRoleMenu2(discord.ui.View):
        @discord.ui.select(placeholder="–†–æ–ª–∏", custom_id="select_role_2", options=options, max_values=1)
        async def role_select(self, interaction_select_2: discord.Interaction, select: discord.ui.Select):
            is2_id = str(interaction_select_2.user.id)
            UID[is2_id].secondary_role = select.values[0]
            view = SelectServerMenu()
            await interaction.edit_original_response(
                content=f"–í—ã–±—Ä–∞–Ω–∞ —Ä–æ–ª—å: {UID[is2_id].secondary_role}. –¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ —Å–µ—Ä–≤–µ—Ä –∞–∫–∫–∞—É–Ω—Ç–∞.", view=view)
            await interaction_select_2.response.defer()

    class SelectServerMenu(discord.ui.View):
        @discord.ui.select(placeholder="Select", custom_id="select_role_3", options=server_options, max_values=1)
        async def role_select(self, interaction_select_3: discord.Interaction, select: discord.ui.Select):
            is3_id = str(interaction_select_3.user.id)
            UID[is3_id].server_data = select.values[0]
            UID[is3_id].required_icon = choose_random_icon()
            view = CheckIconButton()
            await interaction.edit_original_response(
                content=f"–°–µ—Ä–≤–µ—Ä {UID[is3_id].server_data}! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏–∑–º–µ–Ω–∏—Ç–µ —Å–≤–æ—é –∏–∫–æ–Ω–∫—É –Ω–∞ "
                        f"{ICON_DICT[UID[is3_id].required_icon]}, –∑–∞—Ç–µ–º –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É.", view=view)
            await interaction_select_3.response.defer()

    class CheckIconButton(discord.ui.View):
        @discord.ui.button(label="–ì–æ—Ç–æ–≤–æ", style=discord.ButtonStyle.primary)
        async def check_icon_1(self, interaction_check_button: discord.Interaction, button: discord.ui.Button):
            icb_id = str(interaction_check_button.user.id)
            try:
                current_icon_id = str(get_summoner_info_by_puuid(UID[icb_id].server_data, UID[icb_id].account_puuid)['profileIconId'])
                if current_icon_id == UID[icb_id].required_icon:  # –ï—Å–ª–∏ –∏–∫–æ–Ω–∫–∞ –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –∫–Ω–æ–ø–∫–∏ —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å —Ç—Ä–µ–±—É–µ–º–æ–π -> True
                    send_data_to_db(icb_id)
                    await interaction_check_button.response.send_message(content="‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞.",
                                                                         ephemeral=True, delete_after=float(10))
                    await interaction.delete_original_response()
                else:
                    await interaction.edit_original_response(content=f'‚ö†Ô∏è –û—à–∏–±–∫–∞, –Ω–µ–≤–µ—Ä–Ω–∞—è –∏–∫–æ–Ω–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏–∑–º–µ–Ω–∏—Ç–µ'
                                                                     f' —Å–≤–æ—é –∏–∫–æ–Ω–∫—É –Ω–∞ {ICON_DICT[UID[icb_id].required_icon]},'
                                                                     f' –∑–∞—Ç–µ–º –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É \'–ì–æ—Ç–æ–≤–æ\'.', view=CheckIconButton())
                    await interaction_check_button.response.defer()
            except sqlite3.IntegrityError:  # –≠—Ç–∞ –æ—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–∑–∞–µ—Ç –µ—Å–ª–∏ discord_id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–¥ —É–∂–µ –µ—Å—Ç—å
                await interaction_check_button.response.send_message(content=f"‚ùå –í—ã —É–∂–µ —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª–∏—Å—å.",
                                                                     ephemeral=True, delete_after=float(10))
                await interaction.delete_original_response()

    start_view = TextInputView()  # –°–∞–º—ã–π –ø–µ—Ä–≤—ã–π view, –ø–æ—Å–ª–µ –Ω–µ–≥–æ –≤—ã–≤–æ–¥—è—Ç—Å—è –ø–æ –ø–æ—Ä—è–¥–∫—É
    await interaction.response.send_message("–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.", view=start_view,
                                            ephemeral=True)


@bot.event  # –≠—Ç–æ—Ç –∏–≤–µ–Ω—Ç –Ω—É–∂–µ–Ω –¥–ª—è –ø–æ–¥–≥—Ä—É–∑–∫–∏ –∫–æ–º–∞–Ω–¥—ã —á–µ—Ä–µ–∑ bot.tree.command
async def on_ready():
    await bot.tree.sync()
    print(f'Logged in as {bot.user}!')


bot.run(TOKEN)
